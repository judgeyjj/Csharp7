<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="referrer" content="origin" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <title>【mybatis xml】数据层框架应用--Mybatis 基于XML映射文件实现数据的CRUD - lomtom - 博客园</title>
    <meta property="og:description" content="使用MyBatis框架进行持久层开发 MyBatis是支持普通SQL查询，存储过程和高级映射的优秀持久层框架。 MyBatis消除了几乎所有的JDBC代码和参数的手工设置以及对结果集的检索。 MyBa" />
    <link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=KOZafwuaDasEedEenI5aTy8aXH0epbm6VUJ0v3vsT_Q1"/>
<link type="text/css" rel="stylesheet" href="/blog/customcss/579514.css?v=BJE9Mly77MA6esabncjwocGWjG8%3d"/>
<link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.css?v=C8rNZMN1xUcogg2mnN6C_ci7S2vGnJTt9TmfmncHzEA1"/>
    <link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/lomtom/rss"/>
    <link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/lomtom/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/lomtom/wlwmanifest.xml"/>
    <script src="//common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script>var currentBlogId=579514;var currentBlogApp='lomtom',cb_enable_mathjax=false;var isLogined=false;</script>
    <script src="/bundles/blog-common.js?v=smtcUT5dhdu_5eEO8CKHYoVc7DPLgEBGzp6zKkstlzg1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>


<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/lomtom/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="https://www.cnblogs.com/lomtom/">lomtom</a></h1>
<h2></h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">博客园</a></li>
<li><a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/lomtom/">首页</a></li>
<li><a id="blog_nav_newpost" class="menu" rel="nofollow" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="blog_nav_contact" class="menu" rel="nofollow" href="https://msg.cnblogs.com/send/lomtom">联系</a></li>
<li>
<!----></li>
<li><a id="blog_nav_admin" class="menu" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			<div id="blog_stats">
<span id="stats_post_count">随笔 - 26&nbsp; </span>
<span id="stats_article_count">文章 - 0&nbsp; </span>
<span id="stats-comment_count">评论 - 6</span>
</div>
			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
        <div id="post_detail">
<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/lomtom/p/12770516.html">【mybatis xml】数据层框架应用--Mybatis 基于XML映射文件实现数据的CRUD</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown"><h2 id="使用mybatis框架进行持久层开发">使用MyBatis框架进行持久层开发</h2>
<ul>
<li>MyBatis是支持普通SQL查询，存储过程和高级映射的优秀持久层框架。</li>
<li>MyBatis消除了几乎所有的JDBC代码和参数的手工设置以及对结果集的检索。</li>
<li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录。</li>
</ul>
<p><div class="toc"><div class="toc-container-header">目录</div><ul><li><a href="#使用mybatis框架进行持久层开发">使用MyBatis框架进行持久层开发</a><ul><li><a href="#你需要了解的知识点">你需要了解的知识点</a><ul><li><a href="#1、什么是sqlsessionfactory">1、什么是SqlSessionFactory?</a></li><li><a href="#2、mybatis框架的核心配置文件">2、MyBatis框架的核心配置文件</a></li><li><a href="#3、mapper映射文件">3、mapper映射文件</a></li></ul></li><li><a href="#使用">使用</a><ul><li><a href="#1、mybatis下载">1、MyBatis下载</a></li><li><a href="#2、创建实体类">2、创建实体类</a></li><li><a href="#3、创建属性文件jdbcproperties">3、创建属性文件jdbc.properties</a></li><li><a href="#4、创建xml映射配置文件">4、创建XML映射配置文件</a></li><li><a href="#5、创建sql映射的xml文件">5、创建SQL映射的XML文件</a></li><li><a href="#6、创建mapper接口">6、创建Mapper接口</a></li><li><a href="#7、编写mybatis工具类">7、编写mybatis工具类</a></li><li><a href="#8、编写测试类">8、编写测试类</a></li></ul></li><li><a href="#你可能会出现的问题">你可能会出现的问题</a><ul><li><a href="#问题一：找不到mapper映射文件">问题一：找不到mapper映射文件</a></li><li><a href="#问题二：mysql客户端版本过低">问题二：mysql客户端版本过低</a></li><li><a href="#问题三：提示找不到userinfo">问题三：提示找不到UserInfo</a></li></ul></li><li><a href="#写在最后">写在最后</a></li></ul></li></ul></div><br>
<img src="https://img-blog.csdnimg.cn/20200420181818317.png" alt=""></p>
<h3 id="你需要了解的知识点">你需要了解的知识点</h3>
<h4 id="1、什么是sqlsessionfactory">1、什么是SqlSessionFactory?</h4>
<p><code>SqlSessionFactory</code>是MyBatis框架中十分重要的对象，它是单个数据库映射关系经过编译后的内存镜像，其主要作用是创建SqlSession。</p>
<p><code>SqlSessionFactory</code>对象的实例可以通过SqlSessionFactoryBuilder对象来构建，而SqlSessionFactoryBuilder则可以通过XML配置文件或一个预先定义好的Configuration实例构建出SqlSessionFactory的实例</p>
<p>SqlSessionFactory对象是线程安全的，它一旦被创建，在整个应用执行期间都会存在。如果我们多次的创建同一个数据库的SqlSessionFactory，那么此数据库的资源将很容易被耗尽。为此，通常每一个数据库都会只对应一个SqlSessionFactory，所以在构建SqlSessionFactory实例时，建议使用单列模式。</p>
<h4 id="2、mybatis框架的核心配置文件">2、MyBatis框架的核心配置文件</h4>
<p>在MyBatis框架的核心配置文件中，<configuration>元素是配置文件的根元素，其他元素都要在<configuration>元素内配置。<br>
<img src="https://img-blog.csdnimg.cn/20200420180042788.png" alt=""></p>
<h4 id="3、mapper映射文件">3、mapper映射文件</h4>
<p>在映射文件中，<mapper>元素是映射文件的根元素，其他元素都是它的子元素。<br>
<img src="https://img-blog.csdnimg.cn/20200420180608698.png" alt=""></p>
<h3 id="使用">使用</h3>
<p><img src="https://img-blog.csdnimg.cn/20200420181120476.png#pic_center" alt=""></p>
<h4 id="1、mybatis下载">1、MyBatis下载</h4>
<p>在Java或Java Web项目中添加MyBatis框架后，就能对数据表进行CRUD操作了。</p>
<blockquote>
<p>方法一：可以从官方网站: <a href="https://github.com/mybatis%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84MyBatis%E7%89%88%E6%9C%AC%E3%80%82">https://github.com/mybatis下载所需要的MyBatis版本。</a></p>
<p>方法二：使用maven的直接加入依赖，需要MySQL的驱动包、mybatis的驱动包</p>
</blockquote>
<pre><code class="language-xml">        &lt;!--        数据库  start--&gt;
        &lt;!--        引入jdbc与mysql依赖--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;mysql&lt;/groupId&gt;
            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
            &lt;version&gt;8.0.18&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--        mybatis--&gt;
        &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
            &lt;version&gt;3.4.6&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--        数据库 end--&gt;
</code></pre>
<p><strong>注意这里的mysql的驱动包，根据你自己安装的mysql版本，使用<code>mysql -V</code>查询，例如我的是8版本，所以用8版本的驱动包</strong><br>
<img src="https://img-blog.csdnimg.cn/20200420164644292.png" alt=""></p>
<h4 id="2、创建实体类">2、创建实体类</h4>
<p>在src目录下新建<code>com.lomtom.mybatis.entity</code>包，并在其中创建实体类UserInfo（对应数据表user_info）。UserInfo类包含一些属性（对应数据表user_info的部分字段），以及与之对应的getXXX()和setXXX()方法，还可添加构造方法 。<br>
当然你如果使用lombok可以不写他的getter、setter以及constructor。</p>
<pre><code class="language-java">/**
 * @Author: LOMTOM
 * @Date: 2020/4/20
 * @Time: 15:12
 * @Email: lomtom@qq.com
 */
@Data
public class UserInfo {

    private Integer id;

    private String userName;

    private String passWord;

    private Date regDate;

}

</code></pre>
<h4 id="3、创建属性文件jdbcproperties">3、创建属性文件jdbc.properties</h4>
<p>在resources目录下创建属性文件jdbc.properties，保存数据库的连接信息。</p>
<p><code>&lt;properties&gt;</code>是一个配置属性的元素，该元素通常用来将内部的配置外在化，即通过外部的配置来动态的替换内部定义的属性。例如，数据库的连接等属性，就可以通过典型的Java属性文件中的配置来替换，</p>
<pre><code>请根据自己mysql版本，确认之后再食用

1、mysql for version 8
jdbc.driverClassName=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/javaweb2?characterEncoding=UTF-8
jdbc.username=root
jdbc.password=123456

2、mysql for version 5
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/javaweb2?characterEncoding=UTF-8
jdbc.username=root
jdbc.password=123456
</code></pre>
<h4 id="4、创建xml映射配置文件">4、创建XML映射配置文件</h4>
<p>在<code>resources</code>目录下创建MyBatis的XML配置文件<code>mybatis-config.xml</code>，用于加载mysql的连接配置。</p>
<pre><code class="language-xml">&lt;configuration&gt;
    &lt;!--加载属性文件--&gt;
    &lt;properties resource=&quot;jdbc.properties&quot;&gt;&lt;/properties&gt;
    
    &lt;!--给包中的类注册别名,注册后可以直接使用类名,而不用使用全限定的类名就是不用包含包名)。--&gt;
    &lt;typeAliases&gt;
        &lt;package name=&quot;com.lomtom.mybatis&quot;/&gt;
    &lt;/typeAliases&gt;
    
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;${jdbc.driverClassName}&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/lomtom/mybatis/mapper/UserInfoMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>
<ol>
<li>
<p><code>&lt;typeAliases&gt;</code>元素用于为配置文件中的Java类型设置一个简短的名字，即设置别名。别名的设置与XML配置相关，其使用的意义在于减少全限定类名的冗余。<br>
当POJO类过多时可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean。每一个在包 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。若有注解，则别名为其注解值</p>
</li>
<li>
<p><code>&lt;environments&gt;</code>元素用于对环境进行配置。MyBatis的环境配置实际上就是数据源的配置，我们可以通过<code>&lt;environments&gt;</code>元素配置多种数据源，即配置多种数据库。</p>
</li>
</ol>
<h4 id="5、创建sql映射的xml文件">5、创建SQL映射的XML文件</h4>
<p>在<code>resources</code>包中创建SQL映射的XML文件userInfoMapper.xml。</p>
<pre><code class="language-xml">&lt;mapper namespace=&quot;com.lomtom.mybatis.mapper.UserInfoMapper&quot;&gt;
    &lt;!--数据表 user_info的CRUD操作--&gt;
    &lt;insert id=&quot;addUserInfo&quot; parameterType=&quot;com.lomtom.mybatis.entity.UserInfo&quot;&gt;
        insert into user_info(userName, passWord, regDate)
        values(#{userName},#{passWord}, #{regDate})
    &lt;/insert&gt;

    &lt;delete id=&quot;deleteUserInfo&quot; parameterType=&quot;int&quot;&gt;
        delete from user_info where id = #{id}
    &lt;/delete&gt;

    &lt;update id=&quot;updateUserInfo&quot; parameterType=&quot;com.lomtom.mybatis.entity.UserInfo&quot;&gt;
        update user_info set userName = #{userName}, passWord = #{passWord}, regDate = #{regDate} where id = #{id}
    &lt;/update&gt;

    &lt;select id=&quot;getUserInfoById&quot; parameterType=&quot;int&quot; resultType=&quot;com.lomtom.mybatis.entity.UserInfo&quot;&gt;
        select * from user_info where id = #{id}
    &lt;/select&gt;

    &lt;select id=&quot;getALLUserInfo&quot; resultType=&quot;com.lomtom.mybatis.entity.UserInfo&quot;&gt;
        select * from user_info
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>
<p>在上述SQL映射文件中，</p>
<ul>
<li><code>&lt;insert&gt;</code>元素用于映射插入语句，</li>
<li><code>&lt;delete&gt;</code>元素用于映射删除语句，</li>
<li><code>&lt;update&gt;</code>元素用于映射更新语句，</li>
<li><code>&lt;select&gt;</code>元素用于映射查询语句。</li>
</ul>
<p>在这些元素中，id属性设置在命名空间中唯一的标识符，用于引用这条语句。</p>
<ul>
<li>parameterType属性指定传入这条语句的参数类的完全限定名或别名。</li>
<li>resultType属性指定从这条语句中返回的期望类型的类的完全限定名或别名，若查询结果是集合，则resultType的值应该是集合所包含的元素类型，而不能是集合本身。</li>
</ul>
<h4 id="6、创建mapper接口">6、创建Mapper接口</h4>
<p>在<code>com.lomtom.mybatis.mapper</code>包中创建UserInfoMapper.java接口，并且加入</p>
<ul>
<li>testAddUserInfo()方法</li>
<li>testGetUserInfoById()方法</li>
<li>testGetAllUserInfo()方法</li>
<li>testUpdateUserInfo()方法</li>
<li>testDeleteUserInfo()方法</li>
</ul>
<pre><code class="language-java">
/**
 * @Author: LOMTOM
 * @Date: 2020/4/20
 * @Time: 15:24
 * @Email: lomtom@qq.com
 */
public interface UserInfoMapper {

    /**
     * 插入
     * @param userInfo
     * @return
     */
    int addUserInfo(UserInfo userInfo);

    /**
     * 删除
     * @param id
     * @return
     */
    int deleteUserInfo(Integer id);

    /**
     * 获取
     * @param id
     * @return
     */
    UserInfo getUserInfoById(Integer id);

    /**
     * 获取全部
     * @return
     */
    List&lt;UserInfo&gt; getALLUserInfo();

    /**
     * 更新
     * @param userInfo
     * @return
     */
    void updateUserInfo(UserInfo userInfo);
}
</code></pre>
<h4 id="7、编写mybatis工具类">7、编写mybatis工具类</h4>
<pre><code class="language-java">
/**
 * @Author: LOMTOM
 * @Date: 2020/4/20
 * @Time: 15:49
 * @Email: lomtom@qq.com
 */
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory = null;
    static {
        try {
            Reader reader = Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;);
            sqlSessionFactory =  new SqlSessionFactoryBuilder().build(reader);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static SqlSession getSession() {
        return sqlSessionFactory.openSession();
    }
}

</code></pre>
<h4 id="8、编写测试类">8、编写测试类</h4>
<p>首先，需要加入必不可少的依赖</p>
<pre><code class="language-xml">        &lt;!--        测试--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
</code></pre>
<p>新建Test.java</p>
<pre><code class="language-java">/**
 * @Author: LOMTOM
 * @Date: 2020/4/20
 * @Time: 15:44
 * @Email: lomtom@qq.com
 */


public class MybatisTest {


    @Test
    public void testAddUserInfo(){
        SqlSession sqlSession= MybatisUtils.getSession();
        UserInfoMapper userInfoMapper = sqlSession.getMapper(UserInfoMapper. class);
        UserInfo userInfo= new UserInfo();
        userInfo.setUserName(&quot;qq小冰&quot;);
        userInfo.setPassWord(&quot;123&quot;);
        userInfo.setRegDate(new Date());
        int i= userInfoMapper.addUserInfo(userInfo);
        System. out. println (i+ &quot; record has inserted !&quot;);
        sqlSession.commit();
        sqlSession.close();
    }


    @Test
    public void testGetUserInfoById(){
        SqlSession sqlSession= MybatisUtils.getSession();
        UserInfoMapper userInfoMapper = sqlSession.getMapper(UserInfoMapper. class);
        System.out.println(userInfoMapper.getUserInfoById(1));
        System. out. println (&quot;record has got !&quot;);
        sqlSession.commit();
        sqlSession.close();
    }

    @Test
    public void testGetAllUserInfo(){
        SqlSession sqlSession= MybatisUtils.getSession();
        UserInfoMapper userInfoMapper = sqlSession.getMapper(UserInfoMapper. class);
        System.out.println(userInfoMapper.getALLUserInfo());
        System. out. println (&quot;record has got !&quot;);
        sqlSession.commit();
        sqlSession.close();
    }

    @Test
    public void testUpdateUserInfo(){
        SqlSession sqlSession= MybatisUtils.getSession();
        UserInfoMapper userInfoMapper = sqlSession.getMapper(UserInfoMapper. class);
        UserInfo userInfo= new UserInfo();
        userInfo.setId(1);
        userInfo.setUserName(&quot;qq大冰&quot;);
        userInfo.setPassWord(&quot;123456&quot;);
        userInfo.setRegDate(new Date());
        try {
            userInfoMapper.updateUserInfo(userInfo);
            System. out. println (&quot;record has updated !&quot;);
        }catch (Exception e){
            e.printStackTrace();
        }
        sqlSession.commit();
        sqlSession.close();
    }

    @Test
    public void testDeleteUserInfo(){
        SqlSession sqlSession= MybatisUtils.getSession();
        UserInfoMapper userInfoMapper = sqlSession.getMapper(UserInfoMapper. class);
        int i= userInfoMapper.deleteUserInfo(1);
        System. out. println (i+ &quot; record has deleted !&quot;);
        sqlSession.commit();
        sqlSession.close();
    }
}
</code></pre>
<h3 id="你可能会出现的问题">你可能会出现的问题</h3>
<h4 id="问题一：找不到mapper映射文件">问题一：找不到mapper映射文件</h4>
<p><strong>描述：</strong></p>
<pre><code>### The error may exist in com/lomtom/mybatis/mapper/UserInfoMapper.xml
### Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource com/lomtom/mybatis/mapper/UserInfoMapper.xml
</code></pre>
<p><strong>分析：</strong> idea对目录结构里的存放的文件类型有要求，mapper文件必须放入到resources目录里<br>
<strong>解决：</strong> 在pom.xml中加入资源解析，**/*.xml  代表src/main/java底下全部目录下的全部xml文件</p>
<pre><code class="language-xml">    &lt;build&gt;
        &lt;!--        解决读取不到main里面的xml--&gt;
        &lt;resources&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/java&lt;/directory&gt;
                &lt;includes&gt;
                    &lt;include&gt;**/*.xml&lt;/include&gt;
                &lt;/includes&gt;
                &lt;filtering&gt;false&lt;/filtering&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
    &lt;/build&gt;
</code></pre>
<h4 id="问题二：mysql客户端版本过低">问题二：mysql客户端版本过低</h4>
<p><strong>描述：</strong></p>
<pre><code>MySQLNonTransientConnectionException: Client does not support authentication protocol requested by server; consider upgrading MySQL client 
</code></pre>
<p><strong>分析：</strong> 这是前面一直强调的mysql驱动包的，一定要根据自己的mysql版本导入相应的mysql驱动包<br>
<strong>解决：</strong> 我的是 version 8，而我用的是5的驱动包，更改驱动包后解决</p>
<h4 id="问题三：提示找不到userinfo">问题三：提示找不到UserInfo</h4>
<p><strong>描述：</strong></p>
<pre><code>### The error may exist in com/lomtom/mybatis/mapper/UserInfoMapper.xml
### Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'com/lomtom/mybatis/mapper/UserInfoMapper.xml'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'UserInfo'.  Cause: java.lang.ClassNotFoundException: Cannot find class: UserInfo
</code></pre>
<p><strong>分析：</strong> 这是因为找不到UserInfo类导致的，如果parameterType是<code>UserInfo</code>，原则上使用小写开头的就不会报错，如果报错的话需要将其路径写完整，即包名加类名<code>com.lomtom.mybatis.entity.UserInfo</code></p>
<pre><code class="language-xml">    &lt;insert id=&quot;addUserInfo&quot; parameterType=&quot;UserInfo&quot;&gt;
        insert into user_info(userName, passWord, regDate)
        values(#{userName},#{passWord}, #{regDate})
    &lt;/insert&gt;
</code></pre>
<p>解决：修改parameterType参数</p>
<pre><code class="language-xml">    &lt;insert id=&quot;addUserInfo&quot; parameterType=&quot;com.lomtom.mybatis.entity.UserInfo&quot;&gt;
        insert into user_info(userName, passWord, regDate)
        values(#{userName},#{passWord}, #{regDate})
    &lt;/insert&gt;
</code></pre>
<h3 id="写在最后">写在最后</h3>
<p>你的支持是作者最大的动力</p>
<p>关注公众号：<strong>博奥思园</strong> ，精彩内容不错失</p>
</div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2020-04-24 21:59</span> <a href='https://www.cnblogs.com/lomtom/'>lomtom</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="https://i.cnblogs.com/EditPosts.aspx?postid=12770516" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(12770516);return false;">收藏</a></div>
	</div>
	<script src="//common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script><script>markdown_highlight();</script><script type="text/javascript">var allowComments=true,cb_blogId=579514,cb_entryId=12770516,cb_blogApp=currentBlogApp,cb_blogUserGuid='4b3d8cec-3421-4935-1731-08d7b5fb2c66',cb_entryCreatedDate='2020/4/24 21:59:00';loadViewCount(cb_entryId);var cb_postType=1;var isMarkdown=true;</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id='comment_form' class='commentform'>
<a name='commentform'></a>
<div id='divCommentShow'></div>
<div id='comment_nav'><span id='span_refresh_tips'></span><a href='javascript:void(0);' onclick='return RefreshCommentList();' id='lnk_RefreshComments' runat='server' clientidmode='Static'>刷新评论</a><a href='#' onclick='return RefreshPage();'>刷新页面</a><a href='#top'>返回顶部</a></div>
<div id='comment_form_container'></div>
<div class='ad_text_commentbox' id='ad_text_under_commentbox'></div>
<div id='ad_t2'></div>
<div id='opt_under_post'></div>
<script async='async' src='https://www.googletagservices.com/tag/js/gpt.js'></script>
<script>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
</script>
<script>
  googletag.cmd.push(function() {
        googletag.defineSlot('/1090369/C1', [300, 250], 'div-gpt-ad-1546353474406-0').addService(googletag.pubads());
        googletag.defineSlot('/1090369/C2', [468, 60], 'div-gpt-ad-1539008685004-0').addService(googletag.pubads());
        googletag.pubads().enableSingleRequest();
        googletag.enableServices();
  });
</script>
<div id='cnblogs_c1' class='c_ad_block'>
    <div id='div-gpt-ad-1546353474406-0' style='height:250px; width:300px;'></div>
</div>
<div id='under_post_news'></div>
<div id='cnblogs_c2' class='c_ad_block'>
    <div id='div-gpt-ad-1539008685004-0' style='height:60px; width:468px;'></div>
</div>
<div id='under_post_kb'></div>
<div id='HistoryToday' class='c_ad_block'></div>
<script type='text/javascript'>
 if(enablePostBottom()) {
    codeHighlight();
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverT2();
    deliverC1();
    deliverC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);  
}
</script>
</div>

    
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2020 lomtom
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->

</body>
</html>
