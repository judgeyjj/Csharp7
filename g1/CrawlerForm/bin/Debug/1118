<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="referrer" content="origin" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <title>【5min+】更好的选项实践。.Net Core中的IOptions - 句幽 - 博客园</title>
    <meta property="og:description" content=".NET Core为咱们提供的默认依赖注入方式相对来说功能已经很完善了。某些情况下，您会发现，当我们的业务类被添加到依赖注入容器中时，该类构造函数中所依赖的其它类都得一同添加到容器。可是，我的一些依赖" />
    <link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=KOZafwuaDasEedEenI5aTy8aXH0epbm6VUJ0v3vsT_Q1"/>
<link type="text/css" rel="stylesheet" href="/blog/customcss/401017.css?v=TZbXpieXQG%2f10X3L0iBgILcLZKA%3d"/>
<link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/Custom/bundle-Custom-mobile.css?v=_msYCBCTPwxsehifP8ZdBI6kxamcIjzp-IKwPnrrPeg1"/>
    <link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/uoyo/rss"/>
    <link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/uoyo/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/uoyo/wlwmanifest.xml"/>
    <script src="//common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script>var currentBlogId=401017;var currentBlogApp='uoyo',cb_enable_mathjax=false;var isLogined=false;</script>
    <script src="/bundles/blog-common.js?v=smtcUT5dhdu_5eEO8CKHYoVc7DPLgEBGzp6zKkstlzg1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>


<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/uoyo/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="https://www.cnblogs.com/uoyo/">句幽</a></h1>
<h2></h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">博客园</a></li>
<li><a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/uoyo/">首页</a></li>
<li><a id="blog_nav_newpost" class="menu" rel="nofollow" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="blog_nav_contact" class="menu" rel="nofollow" href="https://msg.cnblogs.com/send/%E5%8F%A5%E5%B9%BD">联系</a></li>
<li><a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/uoyo/rss">订阅</a>
<!--<a id="blog_nav_rss_image" class="aHeaderXML" href="https://www.cnblogs.com/uoyo/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="blog_nav_admin" class="menu" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			<div id="blog_stats">
<span id="stats_post_count">随笔 - 27&nbsp; </span>
<span id="stats_article_count">文章 - 1&nbsp; </span>
<span id="stats-comment_count">评论 - 406</span>
</div>
			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
        <div id="post_detail">
<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12583149.html">【5min+】更好的选项实践。.Net Core中的IOptions</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown"><h2 id="系列介绍"><strong>系列介绍</strong></h2>
<p>【五分钟的dotnet】是一个利用您的碎片化时间来学习和丰富.net知识的博文系列。它所包含了.net体系中可能会涉及到的方方面面，比如C#的小细节，AspnetCore，微服务中的.net知识等等。</p>
<p>通过本篇文章您将Get：</p>
<ul>
<li>不在<strong>AspNet Core</strong>的<code>Startup.cs</code>中完成mvc的选项配置（比如在其它地方为MVC添加过滤器等操作）</li>
<li>了解<code>Options</code>的使用</li>
<li>了解<code>IOptions</code>、<code>IOptionsMonitor</code>、<code>IOptionsSnapshot</code>的区别</li>
</ul>
<p>时长为五分钟以内，建议先投币再上车观看😜</p>
<h2 id="正文"><strong>正文</strong></h2>
<p>.NET Core为咱们提供的默认依赖注入方式[<code>Microsoft.Extensions.DependencyInjection</code>]相对来说功能已经很完善了，虽然有一些功能没有实现（比如在使用factory进行注册时无法获取type等），但并不影响我们令接口与实现进行分离。</p>
<p>某些情况下，您会发现，当我们的业务类被添加到依赖注入容器中时，该类构造函数中所依赖的其它类都得一同添加到容器（<em>虽然有某些奇技淫巧可以规避，但是构造函数注入依旧是规范的手段</em>）。可是，我的一些依赖类为选型类型怎么办呢？比如下面的代码：</p>
<pre><code class="language-csharp">public class MyBusinessClass
{
    public MyBusinessClass(SomeOptions options)
    {
        if (options.ShouldOpenTCP)
            //do something.....

        if (options.ShouldLogIndo)
            // do something
    }
}
</code></pre>
<p><code>SomeOptions</code>是一个典型的选项项类型，我们通过它公开的一些属性来对项目进行配置。而当<code>MyBusinessClass</code>被注入到容器的时候，意味着<code>SomeOptions</code>也需要被注入。</p>
<p>对于这种选项类型，微软给出了专门的处理手段：<code>Microsoft.Extensions.Options</code>包。我们只需要使用该包为<code>IServiceCollection</code>提供的扩展方法<code>AddOptions&lt;TOptions&gt;()</code>就可以完成注入选项：</p>
<pre><code class="language-csharp">services.AddOptions&lt;SomeOptions&gt;();

public class MyBusinessClass
{
    public MyBusinessClass(IOptions&lt;SomeOptions&gt; options)
    {
        SomeOptions value = options.Value;
    }
}
</code></pre>
<p>看起来这和上面的代码好像区别也不是很大吧。都是把<code>SomeOptions</code>添加到容器中，那么第二种方法和第一种方法比起来有什么优点呢？微软专门推出该方式难道只是为了“年底冲业绩”？</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200327082246QQ%E6%88%AA%E5%9B%BE20200327162035.png" alt="x"></p>
<p>非也非也？第二种方式其实用了更好的解耦思想来设计。假如咱们的<code>SomeOptions</code>需要在其它模块中修改怎么办？ 如果用第一种直接注入到容易的方案的话，这就十分的困难。而使用<code>AddOptions&lt;TOptions&gt;</code>的方式您就可以轻而易举。</p>
<p><code>Microsoft.Extensions.Options</code>提供了<code>IConfigureOptions</code>和<code>IPostConfigureOptions</code>这两种类似于生命周期钩子的接口，让您能够在读取选项的时候，进行某些操作。</p>
<h3 id="在aspnetcore中试一试"><strong>在AspNetCore中试一试</strong></h3>
<p>在AspnetCore中就有一个很明显的选项：<code>MvcOptions</code>，该选项提供了咱们配置MVC项目的各种各样的参数。</p>
<pre><code class="language-csharp">//Startup.cs

public void ConfigureServices(IServiceCollection services)
{
    services.AddControllers(options =&gt;
    {
        options.Filters.Add(new MyFileter());
    });
}
</code></pre>
<p>上面代码是我们在<code>Startup.cs</code>中配置<code>MvcOptions</code>最最常见的步骤，这里我用添加一个全局过滤器来举例。</p>
<p>如果我不想在<code>Startup.cs</code>中添加这句代码怎么办呢？ 比如我写了一个第三方的库，库中包含了N个过滤器，我肯定没有办法要求用户在使用该库的时候将这N个过滤器一个一个的添加到<code>options</code>中。（<em>这里只是假设，虽然可以使用特性的方式来完成同样的过滤器功能</em>）</p>
<p>这个时候就可以拿出我们上面讲的一大杀器：<code>IConfigureOptions</code>.</p>
<pre><code class="language-csharp">internal class MvcOptionsConfigure : IConfigureOptions&lt;MvcOptions&gt;
{
    public void Configure(MvcOptions options)
    {
        options.Filters.Add(new MyFileter());
    }
}

services.AddSingleton&lt;IConfigureOptions&lt;MvcOptions&gt;, MvcOptionsConfigure&gt;();
</code></pre>
<p>这样就完成了<strong>关注点的分离</strong>，我们不需要一直死守着<code>Startup.cs</code>文件不放，也不需要让用户手动去配置。只要我们知道<code>IServiceCollection</code>就可以往里面添加我们自己的业务点。当然，<code>Microsoft.Extensions.Options</code>包还提供了另外的方式让您可以完成<code>IConfigureOptions</code>的同样操作，不过这些操作都是像<code>语法糖</code>一样，实质上是相同的：</p>
<pre><code class="language-csharp">//和上面同样的功能
services.Configure&lt;MvcOptions&gt;(Options =&gt;
{
     options.Filters.Add(new MyFileter());
});
</code></pre>
<h3 id="ioptions、ioptionsmonitor和ioptionssnapshot"><strong>IOptions、IOptionsMonitor和IOptionsSnapshot</strong></h3>
<p>在上面其实我们已经见过了<code>IOptions</code>的尊容，我们可以通过注入<code>IOptions&lt;MyOptions&gt;</code>来获取<code>MyOptions</code>实例。</p>
<p>但是！但是！但是！！！！ <code>IOptions</code>还有两个兄弟<code>IOptionsMonitor</code>和<code>IOptionsSnapshot</code>。光名字上长的就很像了，它们都还有类似于“Value”的属性来获取选项实例。</p>
<p>妈呀，那么它们到底有什么不同呢？什么时候该用老大，什么使用该用老二呢？ 接下来，年度最佳找不同大戏即将开始………………</p>
<p>先来看看<code>IOptions</code>和<code>IOptionsSnapshot</code>吧，看看它们的接口定义：</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Used to access the value of &lt;typeparamref name=&quot;TOptions&quot;/&gt; for the lifetime of a request.
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;TOptions&quot;&gt;Options type.&lt;/typeparam&gt;
public interface IOptionsSnapshot&lt;out TOptions&gt; : IOptions&lt;TOptions&gt; where TOptions : class, new()
{
    /// &lt;summary&gt;
    /// Returns a configured &lt;typeparamref name=&quot;TOptions&quot;/&gt; instance with the given name.
    /// &lt;/summary&gt;
    TOptions Get(string name);
}
</code></pre>
<p>我天，居然<code>IOptionsSnapshot</code>还继承了<code>IOptions</code>，而且只是多了一个<code>Get</code>方法，那么是否这两个类其实很相似呢？我们直接来看看源码：</p>
<pre><code class="language-csharp">services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptions&lt;&gt;), typeof(OptionsManager&lt;&gt;)));
services.TryAdd(ServiceDescriptor.Scoped(typeof(IOptionsSnapshot&lt;&gt;), typeof(OptionsManager&lt;&gt;)));
</code></pre>
<p>纳尼？这都还不是相似不相似的问题，这TM不是同一个实现吗？只是接口类型不同而已，实现都是<code>OptionsManager&lt;&gt;</code>。 那为啥要搞两个不同的接口。</p>
<p>等等（手动播放名侦探bgm），这俩生命周期咋不一样？ 一个是<code>Singleton</code>一个是<code>Scoped</code>。而再来看<code>IOptionsSnapshot</code>的说明：“Used to access the value of TOptions for the lifetime of a request.”（用于在请求的生存期内访问选项的值）。</p>
<p>原来如此，这样看来就很清晰了。它俩的区别其实就是依赖注入的生命周期不同而已，为单例的<code>IOptions</code>意味着，只要您注入之后以后获取的都是同一个实例，而<code>IOptionsSnapshot</code>呢，作为Scoped级别，每再一个新的Scoped中获取它一次，它就会请求一个新的实例。</p>
<p>所以来举个例子，在AspNet Core中咱们某个选项的值是根据一个文件的某个值来的。刚开始文本的值是“A”，咱们在运行AspNet Core之后我们获取<code>IOptions&lt;MyOptions&gt;</code>和<code>IOptionsSnapshot&lt;MyOptions&gt;</code>，此时得到的<code>MyOptions</code>的该属性的值都是&quot;A&quot;。但是假如我们更改了文本的值，改为“B”。如果在发起一个http请求去获取<code>MyOptions</code>的结果，此时<code>IOptions&lt;MyOptions&gt;</code>依旧是“A”，而<code>IOptionsSnapshot&lt;MyOptions&gt;</code>则更改为了B。</p>
<p>原因很简单，因为<code>IOptions&lt;MyOptions&gt;</code>是单例的，所以从程序一开始加载过一次之后，以后访问它都是这个结果，而<code>IOptionsSnapshot&lt;MyOptions&gt;</code>是Scoped级别的，所以每一个新的Scoped时都会又去访问文本文件获取值，而一次Http请求就会开启一次新的Scoped，所以此时结果就成为“B”。这个时候我们大概就能读懂上面<code>IOptionsSnapshot&lt;&gt;</code>接口的解释了：“用于在请求的生存期内访问选项的值”。</p>
<p>三兄弟一下就干掉了俩，接下来看看最后一个好兄弟（毒瘤）:<code>IOptionsMonitor</code>。还是直接看它的源代码呢：</p>
<pre><code class="language-csharp">services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitor&lt;&gt;), typeof(OptionsMonitor&lt;&gt;)));
</code></pre>
<p>纳尼？单例？ 那是不是意味着它也一样，一旦启动了之后还是保持原有的结果呢？先不急，看看它的接口定义再说：</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Used for notifications when &lt;typeparamref name=&quot;TOptions&quot;/&gt; instances change.
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;TOptions&quot;&gt;The options type.&lt;/typeparam&gt;
public interface IOptionsMonitor&lt;out TOptions&gt;
{
    /// &lt;summary&gt;
    /// Returns the current &lt;typeparamref name=&quot;TOptions&quot;/&gt; instance with the &lt;see cref=&quot;Options.DefaultName&quot;/&gt;.
    /// &lt;/summary&gt;
    TOptions CurrentValue { get; }

    /// &lt;summary&gt;
    /// Returns a configured &lt;typeparamref name=&quot;TOptions&quot;/&gt; instance with the given name.
    /// &lt;/summary&gt;
    TOptions Get(string name);

    /// &lt;summary&gt;
    /// Registers a listener to be called whenever a named &lt;typeparamref name=&quot;TOptions&quot;/&gt; changes.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;listener&quot;&gt;The action to be invoked when &lt;typeparamref name=&quot;TOptions&quot;/&gt; has changed.&lt;/param&gt;
    /// &lt;returns&gt;An &lt;see cref=&quot;IDisposable&quot;/&gt; which should be disposed to stop listening for changes.&lt;/returns&gt;
    IDisposable OnChange(Action&lt;TOptions, string&gt; listener);
}
</code></pre>
<p>可以看出它自己是一个单独的接口，并不像其它俩兄弟是继承关系。而且该接口居然有一个<code>OnChange</code>签名？而且该方法需要一个<code>Action&lt;TOptions, string&gt;</code>的参数。</p>
<p>握草（继续手动播放名侦探bgm），如果您有幸看过我的上一篇文章：<a href="https://www.cnblogs.com/uoyo/p/12509871.html">《【5min+】 一个令牌走天下！.Net Core中的ChangeToken》</a>，那么您可能一下就知道它扮演了什么样的角色。(<em>5min+系列居然是连续的....</em> 😭)</p>
<p>再看看该接口的说明：&quot;Used for notifications when TOptions instances change.&quot;（用于在选项实例更改时进行通知）。果然和我们猜的一模一样，那么它的实现类里面一定有咱们上一篇文章中提到的：<code>ChangeToken</code>和<code>IChangeToken</code>等东西。</p>
<p>来吧，扒开它的具体实现，验证咱们的猜想：</p>
<pre><code class="language-csharp"> public OptionsMonitor(IOptionsFactory&lt;TOptions&gt; factory, IEnumerable&lt;IOptionsChangeTokenSource&lt;TOptions&gt;&gt; sources, IOptionsMonitorCache&lt;TOptions&gt; cache)
{
    _factory = factory;
    _sources = sources;
    _cache = cache;

    foreach (var source in _sources)
    {
        var registration = ChangeToken.OnChange(
                () =&gt; source.GetChangeToken(),
                (name) =&gt; InvokeChanged(name),
                source.Name);

        _registrations.Add(registration);
    }
}
</code></pre>
<p>意料之中，也就是说<code>IOptionsMonitor&lt;&gt;</code>的注入级别虽然是单例，但是因为它具有<code>IChangeToken</code>的实现，所以它能够在选项源改变的时候，“立马对选项做出对应的改变”。而改变依赖于<code>IOptionsChangeTokenSource</code>这个令牌源，目前.net core对很多常用工具都实现了该令牌源，比如Logger,Configuration等。所以当我们某个选项依赖于<code>IConfiguration</code>（appsetting.json）的某一项时，当修改appsetting.json文件，该选项的值就能够立马得到更改。</p>
<p>所以来回过头来看这三兄弟。它们的区别其实在于变更的时效性：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
<th>时效性</th>
</tr>
</thead>
<tbody>
<tr>
<td>IOptions</td>
<td>一旦程序启动，该选项的值就无法更改</td>
<td>无时效性可言</td>
</tr>
<tr>
<td>IOptionsSnapshot</td>
<td>当开启一个新Scoped时，就会重新计算选项的值</td>
<td>相对比较低，依赖于合适开启一个新的Scoped</td>
</tr>
<tr>
<td>IOptionsMonitor</td>
<td>依赖于IChangeToken，只要令牌源变更则立刻做出反应</td>
<td>高</td>
</tr>
</tbody>
</table>
<p>假如把<code>IOptionsMonitor&lt;MyOptions&gt;</code>添加到上面<code>IOptions&lt;MyOptions&gt;</code>和<code>IOptionsSnapshot&lt;MyOptions&gt;</code>的文件变更案例，如果在一次HTTP请求中，文件变更了两次，那么<code>IOptionsSnapshot&lt;MyOptions&gt;</code>不会在第二次更改中同步更改，而<code>IOptionsMonitor&lt;MyOptions&gt;</code>则可以。</p>
<p>那么什么时候来使用什么样的接口呢？相信这个时候，您的心里比我还要清楚。当您的选项只是负责一次性处理的时候，应用启动了就不需要更改，那么考虑使用<code>IOptions&lt;MyOptions&gt;</code>，如果是对数据源的变更要求很严格，比如开启了一个“BackgroundJob”在后台运行，该job需要一个选项类型，而该类型依赖于配置文件，需要对配置文件更改时即刻做出改变，那么请考虑使用<code>IOptionsMonitor&lt;MyOptions&gt;</code>。</p>
<p>最后回过头来看微软官方文档上关于“Options”的两个点(<em>ISP和关注点分离</em>)，您应该一下就能理解。<br>
<img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200327095640QQ%E6%88%AA%E5%9B%BE20200327175622.png" alt="x"></p>
<p>如果您有兴趣的话可以跳转至官方文档进行阅读：<a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/configuration/options?view=aspnetcore-3.1#options-post-configuration">《ASP.NET Core 中的选项模式》</a></p>
<p>好啦，今天的车就开完了，如果您喜欢该系列文章可以点击关注。😝</p>
<p><em>最后，偷偷说一句：创作不易，点个推荐吧.....</em></p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1635918/o_200221093942dw-23.png" alt="x"></p>
</div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2020-03-27 18:14</span> <a href='https://www.cnblogs.com/uoyo/'>句幽</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="https://i.cnblogs.com/EditPosts.aspx?postid=12583149" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(12583149);return false;">收藏</a></div>
	</div>
	<script src="//common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script><script>markdown_highlight();</script><script type="text/javascript">var allowComments=true,cb_blogId=401017,cb_entryId=12583149,cb_blogApp=currentBlogApp,cb_blogUserGuid='4660842a-34b1-4866-476c-08d52fc34315',cb_entryCreatedDate='2020/3/27 18:14:00';loadViewCount(cb_entryId);var cb_postType=1;var isMarkdown=true;</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id='comment_form' class='commentform'>
<a name='commentform'></a>
<div id='divCommentShow'></div>
<div id='comment_nav'><span id='span_refresh_tips'></span><a href='javascript:void(0);' onclick='return RefreshCommentList();' id='lnk_RefreshComments' runat='server' clientidmode='Static'>刷新评论</a><a href='#' onclick='return RefreshPage();'>刷新页面</a><a href='#top'>返回顶部</a></div>
<div id='comment_form_container'></div>
<div class='ad_text_commentbox' id='ad_text_under_commentbox'></div>
<div id='ad_t2'></div>
<div id='opt_under_post'></div>
<script async='async' src='https://www.googletagservices.com/tag/js/gpt.js'></script>
<script>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
</script>
<script>
  googletag.cmd.push(function() {
        googletag.defineSlot('/1090369/C1', [300, 250], 'div-gpt-ad-1546353474406-0').addService(googletag.pubads());
        googletag.defineSlot('/1090369/C2', [468, 60], 'div-gpt-ad-1539008685004-0').addService(googletag.pubads());
        googletag.pubads().enableSingleRequest();
        googletag.enableServices();
  });
</script>
<div id='cnblogs_c1' class='c_ad_block'>
    <div id='div-gpt-ad-1546353474406-0' style='height:250px; width:300px;'></div>
</div>
<div id='under_post_news'></div>
<div id='cnblogs_c2' class='c_ad_block'>
    <div id='div-gpt-ad-1539008685004-0' style='height:60px; width:468px;'></div>
</div>
<div id='under_post_kb'></div>
<div id='HistoryToday' class='c_ad_block'></div>
<script type='text/javascript'>
 if(enablePostBottom()) {
    codeHighlight();
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverT2();
    deliverC1();
    deliverC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);  
}
</script>
</div>

    
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2020 句幽
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->

<!--PageEndHtml Block Begin-->
<div class="Snow">
    <canvas id="Snow"></canvas>
</div>

<!--下雪特效-->
<script src="https://blog-static.cnblogs.com/files/uoyo/snoweffects.js"></script>

<script type="text/javascript" language="javascript"> 
//为右下角推荐推荐区域添加关注按钮
window.onload = function () {
    $('#div_digg').prepend('<div style="padding-bottom: 5px" id="please_follow"><span class="icon_favorite" style="padding-top: 2px"></span><a onclick="follow(\'4660842a-34b1-4866-476c-08d52fc34315\');" href="javascript:void(0);" style="font-weight: bold; padding-left:5px;font-size: 14px; vertical-align: super;color: #ff5d47;">关注一下楼主吧</a> </div>');
}
</script>

<!--代码复制-->
<script src="https://cdn.bootcss.com/clipboard.js/2.0.4/clipboard.min.js"></script>

<!--主题-->
<script src="https://blog-static.cnblogs.com/files/uoyo/gshang.2019.10.27.1.js"></script>

<!-- zoom.js 的样式 -->
<link rel="stylesheet" type="text/css" href="https://blog-static.cnblogs.com/files/uoyo/zoom.css">
<!-- Bootstrap 的 transition.js cdn（过渡动画插件）-->
<script src="https://cdn.bootcss.com/bootstrap/3.2.0/js/transition.js"></script>
<!-- zoom.js 核心代码 -->
<script src="https://blog-static.cnblogs.com/files/uoyo/zoom.js"></script>
<script type='text/javascript'>$('#cnblogs_post_body img').attr('data-action', 'zoom');</script>
<!--PageEndHtml Block End-->
</body>
</html>
