<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="referrer" content="origin" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <title>实例讲解Springboot以Template方式整合Redis及序列化问题 - 南瓜慢说 - 博客园</title>
    <meta property="og:description" content="1 简介 之前讲过如何通过 安装 ，也讲了 以`Repository Redis`，建议阅读后再看本文效果更佳： （1） 'Docker安装Redis并介绍漂亮的可视化客户端进行操作' （2） '实例" />
    <link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=KOZafwuaDasEedEenI5aTy8aXH0epbm6VUJ0v3vsT_Q1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/AnotherEon001/bundle-AnotherEon001.css?v=U5UoQIHpO_JKVLfS-_cGiJfvyStJK8n3Tl6p4K1f3ZI1"/>
<link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/AnotherEon001/bundle-AnotherEon001-mobile.css?v=08p1Qv0xTKiGzulu3Yk-n0vdvlMkpJByZdyNDoJhbTY1"/>
    <link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/larrydpk/rss"/>
    <link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/larrydpk/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/larrydpk/wlwmanifest.xml"/>
    <script src="//common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script>var currentBlogId=548387;var currentBlogApp='larrydpk',cb_enable_mathjax=false;var isLogined=false;</script>
    <script src="/bundles/blog-common.js?v=smtcUT5dhdu_5eEO8CKHYoVc7DPLgEBGzp6zKkstlzg1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>


<div id="wrapper">
<div id="header">

<div id="top">
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="https://www.cnblogs.com/larrydpk/">南瓜慢说</a></h1>
<div id="subtitle"></div>
</div>
<div id="sub"><div id="blog_stats">
<div class="BlogStats">随笔 - 29, 文章 - 0, 评论 - 6, 引用 - 0</div>
</div></div>



</div>
<div id="main_container">
<div id="main_content">
<div id="content">
	
        <div id="post_detail">
	<div class="post">
		<h2>
			<a id="cb_post_title_url" href="https://www.cnblogs.com/larrydpk/p/12770541.html">实例讲解Springboot以Template方式整合Redis及序列化问题</a>
		</h2>
		<div class="postbody">
		<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown"><h1 id="1-简介">1 简介</h1>
<p>之前讲过如何通过<code>Docker</code>安装<code>Redis</code>，也讲了<code>Springboot</code>以<code>Repository</code>方式整合<code>Redis</code>，建议阅读后再看本文效果更佳：</p>
<p>（1） <a href="https://www.pkslow.com/archives/docker-redis" title="Docker安装Redis并介绍漂亮的可视化客户端进行操作">Docker安装Redis并介绍漂亮的可视化客户端进行操作</a></p>
<p>（2） <a href="https://www.pkslow.com/archives/springboot-redis-repository" title="实例讲解Springboot以Repository方式整合Redis">实例讲解Springboot以Repository方式整合Redis</a></p>
<p>本文将通过实例讲解<code>Springboot</code>以<code>Template</code>方式整合<code>Redis</code>，并遇到一些序列化的问题。代码结构如下：</p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200424220555989-1363634169.png" alt="code"></p>
<h1 id="2-整合过程">2 整合过程</h1>
<p>与文章《<a href="https://www.pkslow.com/archives/springboot-redis-repository" title="实例讲解Springboot以Repository方式整合Redis">实例讲解Springboot以Repository方式整合Redis</a>》相同的代码不再列出来，文末将提供代码下载方式。</p>
<h2 id="21-自动配置类">2.1 自动配置类</h2>
<p>把相关依赖引入到项目中后，<code>Springboot</code>就自动帮我们生成了<code>Template</code>类，分别是<code>RedisTemplate</code>和<code>StringRedisTemplate</code>。看一下自动配置类能看出这两个类都已经创建到Spring容器里了。</p>
<pre><code class="language-java">public class RedisAutoConfiguration {
    public RedisAutoConfiguration() {
    }

    @Bean
    @ConditionalOnMissingBean( name = {"redisTemplate"} )
    public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException {
        RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate();
        template.setConnectionFactory(redisConnectionFactory);
        return template;
    }

    @Bean
    @ConditionalOnMissingBean
    public StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException {
        StringRedisTemplate template = new StringRedisTemplate();
        template.setConnectionFactory(redisConnectionFactory);
        return template;
    }
}
</code></pre>
<p>实际上<code>StringRedisTemplate</code>是<code>RedisTemplate</code>的子类，对于<code>String</code>类型，更推荐使用前者，它的类型只能是<code>String</code>的，会有类型检查上的安全；而<code>RedisTemplate</code>可以操作任何类型。</p>
<h2 id="22-实现数据访问层">2.2 实现数据访问层</h2>
<p>本文通过<code>RedisTemplate</code>对<code>Redis</code>进行操作，所以我们需要将它注入进来。代码如下：</p>
<pre><code class="language-java">package com.pkslow.springbootredistemplate.dal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Repository;

@Repository
public class UserDAL {
    @Autowired
    private RedisTemplate&lt;Object, Object&gt; redisTemplate;

    public void setValue(Object key, Object value) {
        redisTemplate.opsForValue().set(key, value);
    }

    public Object getValue(Object key) {
        return redisTemplate.opsForValue().get(key);
    }
}
</code></pre>
<p><code>RedisTemplate</code>提供了丰富的方法，具体可以参考官方文档，本次用到的及类似的方法有：</p>
<ul>
<li><em>opsForHash()</em>： 返回对于Hash的操作类；</li>
<li><em>opsForList()</em>： 返回对于列表List的操作类；</li>
<li><em>opsForSet()</em>： 返回对于Set的操作类；</li>
<li><em>opsForValue()</em>： 返回对于字符串String的操作类；</li>
<li><em>opsForZSet()</em>： 返回对于ZSet的操作类。</li>
</ul>
<h2 id="23-实现controller">2.3 实现Controller</h2>
<p>我们需要把功能通过<code>Web</code>的方式暴露出去，实现以下<code>Contrller</code>：</p>
<pre><code class="language-java">package com.pkslow.springbootredistemplate.controller;

import com.pkslow.springbootredistemplate.dal.UserDAL;
import com.pkslow.springbootredistemplate.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/userTemplate")
public class UserTemplateController {

    @Autowired
    private final UserDAL userDAL;

    public UserTemplateController(UserDAL userDAL) {
        this.userDAL = userDAL;
    }

    @GetMapping("/{userId}")
    public User getByUserId(@PathVariable String userId) {
        return (User)userDAL.getValue(userId);
    }

    @PostMapping("/{userId}")
    public User addNewUser(@PathVariable String userId,
                           @RequestBody User user) {
        user.setUserId(userId);
        userDAL.setValue(userId, user);
        return user;
    }

}
</code></pre>
<p>只提供两个接口，分别是设值和取值。</p>
<h2 id="24-通过postman测试">2.4 通过Postman测试</h2>
<p>（1）存入对象</p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200424220556280-1175971996.png" alt="Postman save"></p>
<p>（2）读取对象</p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200424220556931-283773965.png" alt="Postman Get"></p>
<p>能写能读，功能实现，完美！Perfect！收工！</p>
<h1 id="3-序列化问题">3 序列化问题</h1>
<p>程序功能正常运行一段时间后，运维杀来了：<strong>“这是什么东西？我怎么看得懂？我要怎么查看数据？”</strong></p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200424220557520-1284791947.png" alt="Issue"></p>
<h2 id="31-定位问题">3.1 定位问题</h2>
<p>不得不重新打开项目代码，<code>Debug</code>一下看看哪出了问题。既然用<code>Postman</code>测试能正常显示，而数据库显示不对，说明是写入数据库时做了转换。查看<code>RedisTemplate</code>就行了，毕竟活是他干的（先疯狂甩锅）。</p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200424220558031-1522674552.png" alt="Deubg"></p>
<p>看它的序列化类用的是默认的<code>JdkSerializationRedisSerializer</code>，所以序列化后的数据我们看不懂。</p>
<h2 id="32-问题修复">3.2 问题修复</h2>
<p>甩锅完后，还是要修复问题的，毕竟代码是自己写的。关键就是替换掉<code>RedisTemplate</code>所使用的序列化类就行了，这有两个方案可选：</p>
<p>（1）自定义一个新的<code>RedisTemplate</code>以覆盖旧的，在定义的时候指定序列化类。大致代码如下：</p>
<pre><code class="language-java">@Bean
public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) {
  Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);
  ObjectMapper om = new ObjectMapper();
  om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
  om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
  jackson2JsonRedisSerializer.setObjectMapper(om);

  RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;String, Object&gt;();
  template.setConnectionFactory(redisConnectionFactory);
  template.setKeySerializer(jackson2JsonRedisSerializer);
  template.setValueSerializer(jackson2JsonRedisSerializer);
  template.setHashKeySerializer(jackson2JsonRedisSerializer);
  template.setHashValueSerializer(jackson2JsonRedisSerializer);
  template.afterPropertiesSet();
  return template;
}
</code></pre>
<p>甚至还可以自定义<code>RedisConnectionFactory</code>，如下：</p>
<pre><code class="language-java">@Bean
JedisConnectionFactory jedisConnectionFactory() {
    JedisConnectionFactory jedisConFactory = new JedisConnectionFactory();
    jedisConFactory.setHostName("localhost");
    jedisConFactory.setPort(6379);
    return jedisConFactory;
}
</code></pre>
<p>（2）使用原有的<code>RedisTemplate</code>，在使用前替换掉序列化类</p>
<p>引用的类的代码如下，<code>init</code>方法作为初始化方法：</p>
<pre><code class="language-java">public class UserDAL {
    @Autowired
    private RedisTemplate&lt;Object, Object&gt; redisTemplate;

    public void init() {
        redisTemplate.setKeySerializer(new StringRedisSerializer());
        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;&gt;(Object.class));

    }

    public void setValue(Object key, Object value) {
        redisTemplate.opsForValue().set(key, value);
    }

    public Object getValue(Object key) {
        return redisTemplate.opsForValue().get(key);
    }
}
</code></pre>
<p>然后在创建<code>UserDAL</code>时，代码如下：</p>
<pre><code class="language-java">@Bean(initMethod = "init")
public UserDAL userDAL() {
  return new UserDAL();
}
</code></pre>
<p>重新提交代码、重新测试、重新发布，结果可以了：</p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200424220558329-1726315549.png" alt="Good Result"></p>
<h1 id="4-总结">4 总结</h1>
<p>本文详细代码可在<strong>南瓜慢说</strong>公众号回复&lt;<strong>SpringbootRedisTemplate</strong>&gt;获取。</p>
<hr>
<p>欢迎访问<a href="https://www.pkslow.com/" title="南瓜慢说 www.pkslow.com">南瓜慢说 www.pkslow.com</a>获取更多精彩文章！</p>
<p>欢迎关注微信公众号&lt;<strong>南瓜慢说</strong>&gt;，将持续为你更新...</p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200424220558516-557245046.jpg" alt=""></p>
<p><strong>多读书，多分享；多写作，多整理。</strong></p>
</div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<p class="postfoot">
			posted on <span id="post-date">2020-04-24 22:06</span> <a href='https://www.cnblogs.com/larrydpk/'>南瓜慢说</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="https://i.cnblogs.com/EditPosts.aspx?postid=12770541" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(12770541);return false;">收藏</a>
		</p>
	</div>
	<script src="//common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script><script>markdown_highlight();</script><script type="text/javascript">var allowComments=true,cb_blogId=548387,cb_entryId=12770541,cb_blogApp=currentBlogApp,cb_blogUserGuid='4d26c142-e90c-e611-9fc1-ac853d9f53cc',cb_entryCreatedDate='2020/4/24 22:06:00';loadViewCount(cb_entryId);var cb_postType=1;var isMarkdown=true;</script>
	
	</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id='comment_form' class='commentform'>
<a name='commentform'></a>
<div id='divCommentShow'></div>
<div id='comment_nav'><span id='span_refresh_tips'></span><a href='javascript:void(0);' onclick='return RefreshCommentList();' id='lnk_RefreshComments' runat='server' clientidmode='Static'>刷新评论</a><a href='#' onclick='return RefreshPage();'>刷新页面</a><a href='#top'>返回顶部</a></div>
<div id='comment_form_container'></div>
<div class='ad_text_commentbox' id='ad_text_under_commentbox'></div>
<div id='ad_t2'></div>
<div id='opt_under_post'></div>
<script async='async' src='https://www.googletagservices.com/tag/js/gpt.js'></script>
<script>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
</script>
<script>
  googletag.cmd.push(function() {
        googletag.defineSlot('/1090369/C1', [300, 250], 'div-gpt-ad-1546353474406-0').addService(googletag.pubads());
        googletag.defineSlot('/1090369/C2', [468, 60], 'div-gpt-ad-1539008685004-0').addService(googletag.pubads());
        googletag.pubads().enableSingleRequest();
        googletag.enableServices();
  });
</script>
<div id='cnblogs_c1' class='c_ad_block'>
    <div id='div-gpt-ad-1546353474406-0' style='height:250px; width:300px;'></div>
</div>
<div id='under_post_news'></div>
<div id='cnblogs_c2' class='c_ad_block'>
    <div id='div-gpt-ad-1539008685004-0' style='height:60px; width:468px;'></div>
</div>
<div id='under_post_kb'></div>
<div id='HistoryToday' class='c_ad_block'></div>
<script type='text/javascript'>
 if(enablePostBottom()) {
    codeHighlight();
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverT2();
    deliverC1();
    deliverC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);  
}
</script>
</div>

    
</div>
</div>
<div id="leftmenu">


<h3>导航</h3>
<ul>
<li>
<a id="blog_nav_sitehome" href="https://www.cnblogs.com/">博客园</a></li>
<li>
<a id="blog_nav_myhome" class="two_words" href="https://www.cnblogs.com/larrydpk/">首页</a></li>
<li>
<a id="blog_nav_newpost" rel="nofollow" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li>
<a id="blog_nav_contact" accesskey="9" class="two_words" rel="nofollow" href="https://msg.cnblogs.com/send/%E5%8D%97%E7%93%9C%E6%85%A2%E8%AF%B4">联系</a></li>
<li>
<a id="blog_nav_rss" class="two_words" href="https://www.cnblogs.com/larrydpk/rss">订阅</a>
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/larrydpk/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a>
</li>
<li>
<a id="blog_nav_admin" class="two_words" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
</ul>

<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
<meta name="vs_showGrid" content="False">

<h3>公告</h3>
<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>

<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>

</div>
</div>
<div class="clear"></div>
<div id="footer">

<p id="footer">
	Powered by: 
	<br />
	
	<a id="Footer1_Hyperlink3" NAME="Hyperlink1" href="https://www.cnblogs.com/"><font face="Verdana">博客园</font></a>
	<br />
	Copyright &copy; 南瓜慢说
</p>
</div>
</div>


</body>
</html>
