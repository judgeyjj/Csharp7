<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="请问昨天结束的早是对堆积在了今天吗，今天还来加个班更博，看在这个毅力的份上能否给亿点点推荐。 有个好消息有个坏消息，先说坏消息吧，就是在这么学下去我急需急支糖浆，来回顾回顾前面的知识，这几天学的太急了" />
    <meta property="og:description" content="请问昨天结束的早是对堆积在了今天吗，今天还来加个班更博，看在这个毅力的份上能否给亿点点推荐。 有个好消息有个坏消息，先说坏消息吧，就是在这么学下去我急需急支糖浆，来回顾回顾前面的知识，这几天学的太急了" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>node.js -- 身份认证 - Heymar-10 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=LdAfPG3EWG4o7Q_XIVJY6Bcod1YpBGSGJykht0T_GZw" />
    <link id="MainCss" rel="stylesheet" href="/skins/bj2008/bundle-bj2008.min.css?v=l3vkX1FBaYCUWQ_t-JJha75Z4nJ5KvxptIffCNL8xC0" />
    <link id="highlighter-theme-cnblogs" type="text/css" rel="stylesheet" href="/css/hljs/cnblogs.css?v=yKPfCbE6NGwg5Jn8Cm5G98RHufDcX_NIbkGDyVPvWPQ" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/bj2008/bundle-bj2008-mobile.min.css?v=TE0Xtyve5s8otDT6hQBM2SmCQXhb2IX8KYFtivTe2Yc" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/heymar/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/heymar/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/heymar/wlwmanifest.xml" />
    <script>
        var currentBlogId = 723308;
        var currentBlogApp = 'heymar';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'BJ2008';
        var visitorUserId = '';
        var hasCustomScript = false;
        try {
            if (hasCustomScript && document.referrer && document.referrer.indexOf('baidu.com') >= 0) {
                Object.defineProperty(document, 'referrer', { value: '' });
                Object.defineProperty(Document.prototype, 'referrer', { get: function(){ return ''; } });
            }
        } catch(error) { }
        window.codeHighlightEngine = 1;
        window.enableCodeLineNumber = false;
        window.codeHighlightTheme = 'cnblogs';
    </script>
        <script>
            var currentPostDateAdded = '2022-04-17 00:45';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=KyayiYRvpSgg7du5WKccH8LB1LMuZAKgC9DVqUljgvA"></script>
    
    
    
</head>
<body class="skin-bj2008 has-navbar">
    <a name="top"></a>
        <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://www.heapdump.cn/training/detail/4?source=bky" onclick="countCreativeClicks('M2-HeapDump')" rel="nofollow">
                <img src="https://img2022.cnblogs.com/blog/35695/202204/35695-20220407182236380-944894887.jpg" alt="" onload="countCreativeImpressions('M2-HeapDump')" />
            </a>
        </div>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园" role="banner">
                        <img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" />
                    </a>
                </li>
                <li><a href="/" onclick="countClicks('skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/huawei" onclick="countClicks('nav', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get" role="search">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="search" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <a id="navbar_lite_mode_indicator" data-current-page="blog" style="display: none" href="javascript:void(0)" alt="简洁模式" title="简洁模式启用，您在访问他人博客时会使用简洁款皮肤展示">
                        <img class="navbar-icon" src="/images/aggsite/lite-mode-on.svg" alt="简洁模式" />
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="outer_body">
<div align="center">
	<div id="banner">
		
<!--done-->
<div class="header">
	<div class="headerText">
		<a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/heymar/">Heymar-10</a>
<br>
	</div>
	<div class="headerDis"></div>
</div>


		<div id="left_top">
				<div id="mylinks">
					
<!--done-->
<a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
&nbsp;&nbsp;
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/heymar/">
首页</a>
&nbsp;&nbsp;

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
&nbsp;&nbsp;<a id="MyLinks1_NewArticleLink" class="menu" href="https://i.cnblogs.com/EditArticles.aspx?opt=1">新文章</a>
&nbsp;&nbsp;
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Heymar-10">
联系</a>&nbsp;&nbsp;
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
&nbsp;&nbsp;
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/heymar/rss/">
订阅</a>&nbsp;
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/heymar/rss/">
    <img src="/skins/bj2008/images/xml.gif" alt="订阅" />
</a>


				</div>
				<div id="mystats">
					
						<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
					
			    </div>
		</div>
	</div>
	<div id="main">
		
		<!-- left starts -->
		<div id="left">
			
			<div id="topics">
				<!--done-->
<div id="post_detail">
    <div class="post">
        <div class="postTitle">
            <img src="/skins/bj2008/images/fire.gif" border="0" align="absmiddle" />
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/heymar/p/16154830.html">
    <span role="heading" aria-level="2">node.js -- 身份认证</span>
    
</a>

        </div>
        <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>请问昨天结束的早是对堆积在了今天吗，今天还来加个班更博，看在这个毅力的份上能否给亿点点推荐。</p>
<p>有个好消息有个坏消息，先说坏消息吧，就是在这么学下去我急需急支糖浆，来回顾回顾前面的知识，这几天学的太急了，搞得有点推着走的意思，好消息就是今天的内容是最后最后node的基础内容了，果然天不负我，整完然后有两个大案例，做完我就从上次复习那里开始一直复习过来，然后全部不欠账，就昂首挺胸的走进vue了，等等，这个学完可以进去了吧。</p>
<p>1.</p>
<p>今天的第一个内容说一下web开发模式，今天基本就是讲一个身份认证的内容，我们的web开发模式呢分为两种，一种是服务器渲染模式，就是通过服务器进行一个字符串拼接，将html页面拼接出来，然后直接返回给客户端，这样一来就不需要我们的ajax了，直接给客户端就可以了，他的优点呢就是前端耗时少，毕竟都给服务器做了还有前端什么事，还有他也有利于seo优化，他的缺点就是占用服务器资源，而且不利于前后端分离开发效率低。</p>
<p>第二个模式：前后端分离的模式，它是依赖于ajax的一个广泛应用，后端负责编写api接口，前端就负责调用接口就完事了。他的一个优点就是开发体验好、毕竟前后端分离，用户体验也好，也减轻了服务器的压力。</p>
<p>但是缺点就是不利于seo的优化。</p>
<p>2</p>
<p>然后我们进入身份认证、</p>
<p>什么事身份认证？</p>
<p>通过一定的手段对用户身份进行确认的方式。</p>
<p>服务器渲染开发用的就是session认证，而我们的前后端分离用的就是jwt认证，两者都各有各的优点谁也不让谁。</p>
<p>3.</p>
<p>先来说下session吧</p>
<p>首先了解一下http无状态性，就是指客户端每次的http请求都是独立的，连续多个请求间没有直接关系，服务器也不会主动保留每次http请求状态（就像收银员他能记住每个来的客户是会员吗？）</p>
<p>突破无状态限制。</p>
<p>超市突破这种限制的方式就是给每个会员发会员卡是吧，在我们web领域这种方式就是cookie。</p>
<p>cookie，是存储在用户浏览器一段不超过4kb的字符串，它是由name、value以及有效期。安全性，适用范围的可选属性组成，在不同的域名下，我们的cookie是各自独立的，每当客户端发起请求，会自动把当前域名下的所有cookie发给服务器，注意只是当前域名下。</p>
<p>他的特性就是：自动发送、域名独立、过期时限、4kb限制</p>
<p>3.1</p>
<p>cookie在身份认证中的作用</p>
<p>当我们客户端第一次请求服务器的时候，服务器会通过响应头向客户端发送一个身份认证的cookie，我们的浏览器就会把这个cookie存储起来，当我们下一次 请求的时候，就会直接发送这个cookie也就是前面说的会自动发送，即可证明身份。</p>
<p>要注意我们的cookie是不具有安全性的，浏览器还提供了读写cookie的api，所以cookie很容易被伪造，就像我们的会员卡也有伪造的一样。所以不要用cookie存储重要数据，包括我们jwt也不能存后面会说到。</p>
<p>3.2</p>
<p>那么有没有方法来提高我们cookie的安全性呢？</p>
<p>那就是session认证，就好比我们的会员卡➕刷卡的机制就能破除伪造卡了。</p>
<p>session认证机制：</p>
<p>首先我们的客户端登录账号密码发送了登录请求，服务器会开始验证，当验证成功后，会将其存储在服务器的内存中，同时通过响应头返回一个对应的cookie字符串，我们的浏览器就会把这个字符串保存在当前域名下，当我们再次请求的时候，就会把域名下所有cookie一起发送服务器，服务器就会去找对只对应的cookie匹配成功就能找到你信息了，然后就认证成功了</p>
<p>3.3</p>
<p>说了这么多怎么来再服务器端使用我们的sesson，首先安装导入两部曲然后还需要配置，注意配置是固定写法，secret是可以为任意字符串的。</p>
<p>配置过后就可以用req.session来访问session对象了，将我们的一些数据用sessin存储起来，然后登陆成功又可以通过session取出来，当我们退出登录还可以。destroy方法清空session，注意只是清空这个账户信息，不会清空别人的信息，具体代码如下：</p>
<p>注意看todo也就是我们要做的</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 导入 express 模块</span>
const express = require('express'<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建 express 的服务器实例</span>
const app =<span style="color: rgba(0, 0, 0, 1)"> express()

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_01：请配置 Session 中间件</span>
const session = require('express-session'<span style="color: rgba(0, 0, 0, 1)">)
app.use(session({
  secret : </span>'mySession'<span style="color: rgba(0, 0, 0, 1)">,
  resave : </span>'false'<span style="color: rgba(0, 0, 0, 1)">,
  saveUninitiallized: </span>'ture'<span style="color: rgba(0, 0, 0, 1)">
}))

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 托管静态页面</span>
app.use(express.static('./pages'<span style="color: rgba(0, 0, 0, 1)">))
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 解析 POST 提交过来的表单数据</span>
app.use(express.urlencoded({ extended: <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)"> }))

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 登录的 API 接口</span>
app.post('/api/login', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断用户提交的登录信息是否正确</span>
  <span style="color: rgba(0, 0, 255, 1)">if</span> (req.body.username !== 'admin' || req.body.password !== '000000'<span style="color: rgba(0, 0, 0, 1)">) {
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> res.send({ status: 1, msg: '登录失败'<span style="color: rgba(0, 0, 0, 1)"> })
  }

  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_02：请将登录成功后的用户信息，保存到 Session 中</span>
  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 注意只有当上面配置了session之后才能够使用req.session这个对象</span>
  req.session.user = req.body <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 用户信息</span>
  req.session.islogin = <span style="color: rgba(0, 0, 255, 1)">true</span> <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 用户的登录状态</span>
<span style="color: rgba(0, 0, 0, 1)">

  res.send({ status: </span>0, msg: '登录成功'<span style="color: rgba(0, 0, 0, 1)"> })
})

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 获取用户姓名的接口</span>
app.get('/api/username', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_03：请从 Session 中获取用户的名称，响应给客户端</span>
  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断是否登录成功</span>
  <span style="color: rgba(0, 0, 255, 1)">if</span>(!<span style="color: rgba(0, 0, 0, 1)">req.session.islogin) {
    </span><span style="color: rgba(0, 0, 255, 1)">return</span> res.send({status:1, msg:'fail'<span style="color: rgba(0, 0, 0, 1)">})
  }
  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 登录成功即可响应数据</span>
  <span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> res.send({
    status : </span>0<span style="color: rgba(0, 0, 0, 1)">,
    msg : </span>'success'<span style="color: rgba(0, 0, 0, 1)">,
    username : [req.session.user.username]
  })
})

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 退出登录的接口</span>
app.post('/api/logout', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_04：清空 Session 信息</span>
<span style="color: rgba(0, 0, 0, 1)">  req.session.destroy()
  res.send({
    status : </span>0<span style="color: rgba(0, 0, 0, 1)">,
    msg : </span>'退出登录成功'<span style="color: rgba(0, 0, 0, 1)">
  })
})

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 调用 app.listen 方法，指定端口号并启动web服务器</span>
app.listen(80, <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
  console.log(</span>'Express server running at http://127.0.0.1:80'<span style="color: rgba(0, 0, 0, 1)">)
})</span></pre>
</div>
<p><img src="https://img2022.cnblogs.com/blog/2680817/202204/2680817-20220417003110747-1220511540.gif" alt=""></p>
<p>3.</p>
<p>这就是session，然后我们看到下一个认证机制jwt，session需要cookie才能够实现是吧，但我们的cookie有一个致命问题，不支持跨域，如果涉及到跨域需要配置很大一堆步骤。</p>
<p>JWT目前最流行跨域认证解决方案。</p>
<p>实现原理：首先还是客户端发起一个请求头发送账号密码，服务器验证，验证成功后会经过加密生辰一个token字符串然后会给你返回一个token字符串，我们拿到这个token字符串会将其存储在localstorage或者sessionStorage中，当我们再次请求就会通过一个authorization的请求头将token发送给服务器，服务器拿到token就会将他还原成用户的信息对象，然后身份也就认证成功了。</p>
<p>JWT的组成部分是有三部分组成：header。patyload。signature，这个。只是分割作用，我们的真正信息重在中间的payload前后两个只是保证token的安全性。</p>
<p>怎么在express中来使用我们的token？</p>
<p>需要安装两个包，还需要定义密匙是自己自定义的</p>
<p>第四步生成JWT字符串的时候在sign这个方法里面，这个配置有效期是token在规定期限之内能够拿来验证的期限；</p>
<p>第五步将jwt转换为json这个语句当中，unless这个语句的意思是不需要身份验证的接口</p>
<p>配置完第五步转换为json文件后我们就可以用req.user来获取信息了，而这个信息就是我们第四步把什么转换为jwt字符串的信息，</p>
<p>最后当我们的token过期或者不合法就会出现错误，这个时候要需要一个错误中间件</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 导入 express 模块</span>
const express = require('express'<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建 express 的服务器实例</span>
const app =<span style="color: rgba(0, 0, 0, 1)"> express()

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span>
const jwt = require('jsonwebtoken'<span style="color: rgba(0, 0, 0, 1)">)
const expressJwt </span>= require('express-jwt'<span style="color: rgba(0, 0, 0, 1)">)
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 允许跨域资源共享</span>
const cors = require('cors'<span style="color: rgba(0, 0, 0, 1)">)
app.use(cors())

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 解析 post 表单数据的中间件</span>
const bodyParser = require('body-parser'<span style="color: rgba(0, 0, 0, 1)">)
const { UnauthorizedError } </span>= require('express-jwt'<span style="color: rgba(0, 0, 0, 1)">)
const { response } </span>= require('express'<span style="color: rgba(0, 0, 0, 1)">)
app.use(bodyParser.urlencoded({ extended: </span><span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)"> }))

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span>
const secretKey = 'hard hard study day day up'
<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件</span>
app.use(expressJwt({secret : secretKey, algorithms : ['HS256']}).unless({path : [/^\/api\//<span style="color: rgba(0, 0, 0, 1)">]}))
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 登录接口</span>
app.post('/api/login', <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (req, res) {
  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 将 req.body 请求体中的数据，转存为 userinfo 常量</span>
  const userinfo =<span style="color: rgba(0, 0, 0, 1)"> req.body
  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 登录失败</span>
  <span style="color: rgba(0, 0, 255, 1)">if</span> (userinfo.username !== 'admin' || userinfo.password !== '000000'<span style="color: rgba(0, 0, 0, 1)">) {
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> res.send({
      status: </span>400<span style="color: rgba(0, 0, 0, 1)">,
      message: </span>'登录失败！'<span style="color: rgba(0, 0, 0, 1)">
    })
  }
  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 登录成功</span>
  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span>
  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 转化成token加密文件</span>
  const tokenStr = jwt.sign({username : userinfo.username, algorithms : ['HS256']}, secretKey, {expiresIn : '1h'<span style="color: rgba(0, 0, 0, 1)">})
  res.send({
    status: </span>200<span style="color: rgba(0, 0, 0, 1)">,
    message: </span>'登录成功！'<span style="color: rgba(0, 0, 0, 1)">,
    token: tokenStr </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 要发送给客户端的 token 字符串</span>
<span style="color: rgba(0, 0, 0, 1)">  })
})

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 这是一个有权限的 API 接口</span>
app.get('/admin/getinfo', <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (req, res) {
  </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span>
<span style="color: rgba(0, 0, 0, 1)">  
  res.send({
    status: </span>200<span style="color: rgba(0, 0, 0, 1)">,
    message: </span>'获取用户信息成功！'<span style="color: rgba(0, 0, 0, 1)">,
    data: {username : req.user} </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 要发送给客户端的用户信息</span>
<span style="color: rgba(0, 0, 0, 1)">  })
})

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span>
app.use((err, req, res, next) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {
  </span><span style="color: rgba(0, 0, 255, 1)">if</span> (err.name === 'UnauthorizedError'<span style="color: rgba(0, 0, 0, 1)">) {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 这次错误是由token解析失败导致的</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span> res.send({status : 401, msg : '无效的token'<span style="color: rgba(0, 0, 0, 1)">})
  }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 其他错误</span>
    <span style="color: rgba(0, 0, 255, 1)">return</span> res.send({status: 500, msg : '未知的错误'<span style="color: rgba(0, 0, 0, 1)">})
  }
})
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 调用 app.listen 方法，指定端口号并启动web服务器</span>
app.listen(8888, <span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> () {
  console.log(</span>'Express server running at http://127.0.0.1:8888'<span style="color: rgba(0, 0, 0, 1)">)
})</span></pre>
</div>
<p>然后后面会有两个项目，会把之前所学的node综合起来，我到时候单独开个博来说一下吧，还是有一些注意事项的</p>
<p>&nbsp;</p>
</div>
<div class="clear"></div>
<div id="blog_post_info_block" role="contentinfo">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
        <div class="postDesc">posted on 
<span id="post-date">2022-04-17 00:45</span>&nbsp;
<a href="https://www.cnblogs.com/heymar/">Heymar-10</a>&nbsp;
阅读(<span id="post_view_count">35</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=16154830" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(16154830);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '16154830', targetLink: 'https://www.cnblogs.com/heymar/p/16154830.html', title: 'node.js -- 身份认证' })">举报</a></div>
    </div>
</div>


<script>
    var cb_entryId = 16154830, cb_entryCreatedDate = '2022-04-17 00:45', cb_postType = 1, cb_postTitle = 'node.js -- 身份认证';
    var allowComments = true, cb_blogId = 723308, cb_blogApp = 'heymar', cb_blogUserGuid = '5b43f3f5-bf15-463a-1b4a-08d9bb01539c';
    mermaidRender.render()
    markdown_highlight()
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
    updatePostStats(
            [cb_entryId],
            function(id, count) { $("#post_view_count").text(count) },
            function(id, count) { $("#post_comment_count").text(count) })
</script>
<a id="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="cnblogs_ch"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
            <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
        <div id="cnblogs_c2" class="under-post-card">
            <a href="https://developer.huawei.com/consumer/cn/forum/topic/0202851788421280176?fid=23&amp;ha_source=bokeyuan&amp;ha_source=HeZuo30&amp;ha_sourceId=89000081" rel="nofollow" target="_blank" onclick="countCreativeClicks('C2-华为-codelabs')">
                <img src="https://img2022.cnblogs.com/blog/35695/202204/35695-20220413123003334-931328747.jpg" alt="" onload="countCreativeImpressions('C2-华为-codelabs')" />
            </a>
        </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
        var commentManager = new blogCommentManager();
        commentManager.renderComments(0);
        fixPostBody();

                        window.tocManager.displayDisableTocTips = false;
                        window.tocManager.generateToc();
            setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>



			</div>
			<br /><br /><br />
		</div>
		<!-- left ends -->
	<!-- right starts -->
		<div id="right">
			<!-- 右侧工具部分 -->
			<div id="right_content">
				<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
				<div id="calendar">
					<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
				</div>
				 
				<DIV id="leftcontentcontainer">
						<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
				</DIV>
				
			 </div>
			<!-- //右侧工具部分 -->
		</div>
	<!-- right ends -->
	  
	
	</div>
	<div class="clear"></div>
	<div id="footer">
		Copyright &copy; 2022 Heymar-10
<br /><span id="poweredby">Powered by .NET 6 on Kubernetes</span>


  
	</div>
	</div>
</div>


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8AuMt_3FvyxIgNOR82PHE4kReN15gZGMmbh0aj5oEoaP41o0zQiqtQOVZkUrW0ydDn7BQ-gHWZn-uBmA0TBET3JMAJvRapd9do07iozz_frpYHa157uGlVMZ_uKI5AP67wL2rx5vTfH40QSKRKx7qjk" />
        <script async src="https://www.googletagmanager.com/gtag/js?id=UA-476124-1"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        var kv = getGACustom();
        if (kv) {
            gtag('set', kv);
        }
        gtag('config', 'UA-476124-1');
    </script>
<script defer src="https://hm.baidu.com/hm.js?866c9be12d4a814454792b1fd0fed295"></script>
</body>
</html>