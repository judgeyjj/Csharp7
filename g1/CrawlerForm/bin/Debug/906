<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="referrer" content="origin" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <title>实例讲解Springboot以Repository方式整合Redis - 南瓜慢说 - 博客园</title>
    <meta property="og:description" content="1 简介 是高性能的 数据库，经常作为缓存流行于各大互联网架构中。本文将介绍如何在 中整合 ，使用 的方式操作。 代码结构如下： 2 整合过程 2.1 安装Redis数据库 为了节省时间，就直接通过 " />
    <link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=KOZafwuaDasEedEenI5aTy8aXH0epbm6VUJ0v3vsT_Q1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/AnotherEon001/bundle-AnotherEon001.css?v=U5UoQIHpO_JKVLfS-_cGiJfvyStJK8n3Tl6p4K1f3ZI1"/>
<link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/AnotherEon001/bundle-AnotherEon001-mobile.css?v=08p1Qv0xTKiGzulu3Yk-n0vdvlMkpJByZdyNDoJhbTY1"/>
    <link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/larrydpk/rss"/>
    <link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/larrydpk/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/larrydpk/wlwmanifest.xml"/>
    <script src="//common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script>var currentBlogId=548387;var currentBlogApp='larrydpk',cb_enable_mathjax=false;var isLogined=false;</script>
    <script src="/bundles/blog-common.js?v=smtcUT5dhdu_5eEO8CKHYoVc7DPLgEBGzp6zKkstlzg1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>


<div id="wrapper">
<div id="header">

<div id="top">
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="https://www.cnblogs.com/larrydpk/">南瓜慢说</a></h1>
<div id="subtitle"></div>
</div>
<div id="sub"><div id="blog_stats">
<div class="BlogStats">随笔 - 29, 文章 - 0, 评论 - 6, 引用 - 0</div>
</div></div>



</div>
<div id="main_container">
<div id="main_content">
<div id="content">
	
        <div id="post_detail">
	<div class="post">
		<h2>
			<a id="cb_post_title_url" href="https://www.cnblogs.com/larrydpk/p/12758143.html">实例讲解Springboot以Repository方式整合Redis</a>
		</h2>
		<div class="postbody">
		<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown"><h1 id="1-简介">1 简介</h1>
<p><code>Redis</code>是高性能的<code>NoSQL</code>数据库，经常作为缓存流行于各大互联网架构中。本文将介绍如何在<code>Springboot</code>中整合<code>Spring Data Redis</code>，使用<code>Repository</code>的方式操作。</p>
<p>代码结构如下：</p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200423020247814-1900579198.png" alt="code"></p>
<h1 id="2-整合过程">2 整合过程</h1>
<h2 id="21-安装redis数据库">2.1 安装Redis数据库</h2>
<p>为了节省时间，就直接通过<code>Docker</code>来安装了，可以参考文章：<a href="https://www.pkslow.com/archives/docker-redis">Docker安装Redis并介绍漂亮的可视化客户端进行操作</a>，可以快速安装并使用客户端进行查看和操作。</p>
<h2 id="22-引入相关依赖">2.2 引入相关依赖</h2>
<p>我们引入<code>Springboot Web</code>的依赖，以启动REST服务。还需要引入<code>Spring Data Redis</code>相关的依赖。最后，还需要<code>commons-pool2</code>，不然会因为缺少类而无法启动。</p>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="23-配置连接信息">2.3 配置连接信息</h2>
<p>配置<code>Redis</code>的连接信息，这个信息跟你安装时的配置有关，同时配置了连接池，各项的配置及相关解释如下：</p>
<pre><code class="language-properties"># Redis数据库索引，默认为0
spring.redis.database=0
# Redis端口
spring.redis.port=6379
# Redis服务器主机
spring.redis.host=localhost
# 连接池最大连接数
spring.redis.lettuce.pool.max-active=8
# 连接池最大空闲
spring.redis.lettuce.pool.max-idle=8
# 连接池最小空闲
spring.redis.lettuce.pool.min-idle=2
# 连接池最大阻塞等待时间
spring.redis.lettuce.pool.max-wait=1ms
# 超时时间
spring.redis.lettuce.shutdown-timeout=100ms
</code></pre>
<h2 id="24-创建实体类">2.4 创建实体类</h2>
<p>存入<code>Redis</code>中的数据类型，可以是自定义的一个类，注意需要加上注解<code>@RedisHash</code>和<code>@Id</code>。存入<code>Redis</code>的数据为<code>Set</code>类型。</p>
<p>具体代码如下：</p>
<pre><code class="language-java">package com.pkslow.redis.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.redis.core.RedisHash;
import java.util.Date;

@RedisHash(&quot;User&quot;)
public class User {
    @Id
    private String userId;
    private String name;
    private Integer age;
    private Date createTime = new Date();

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public Date getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }
}
</code></pre>
<h2 id="25-数据库访问层userrepository接口">2.5 数据库访问层UserRepository接口</h2>
<p>直接继承<code>CrudRepository</code>接口就行了，不用自己来实现，需要注意<code>CrudRepository&lt;User, String&gt;</code>的泛型类型：</p>
<pre><code class="language-java">package com.pkslow.redis.dal;

import com.pkslow.redis.model.User;
import org.springframework.data.repository.CrudRepository;

public interface UserRepository extends CrudRepository&lt;User, String&gt; {
}
</code></pre>
<h2 id="26-实现controller">2.6 实现Controller</h2>
<p><code>Controller</code>实现了<code>RESTful</code>风格的增删改查功能，只要把<code>UserRepository</code>注入便可以使用它来操作：</p>
<pre><code class="language-java">package com.pkslow.redis.controller;

import com.pkslow.redis.dal.UserRepository;
import com.pkslow.redis.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(&quot;/user&quot;)
public class UserController {
    @Autowired
    private final UserRepository userRepository;

    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @GetMapping(&quot;&quot;)
    public Iterable&lt;User&gt; getAllUsers() {
        return userRepository.findAll();
    }

    @GetMapping(&quot;/{userId}&quot;)
    public User getByUserId(@PathVariable String userId) {
        return userRepository.findById(userId).orElse(new User());
    }

    @PostMapping(&quot;&quot;)
    public User addNewUser(@RequestBody User user) {
        return userRepository.save(user);
    }

    @DeleteMapping(&quot;/{userId}&quot;)
    public String delete(@PathVariable String userId) {
        User user = new User();
        user.setUserId(userId);
        userRepository.deleteById(userId);
        return &quot;deleted: &quot; + userId;
    }

    @PutMapping(&quot;&quot;)
    public User update(@RequestBody User user) {
        return userRepository.save(user);
    }
}
</code></pre>
<h1 id="3-postman接口测试">3 Postman接口测试</h1>
<p>本文使用<code>Postman</code>进行测试，结果显示的时间为GMT时间，每个功能测试如下：</p>
<p><strong>（1）新增User</strong></p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200423020250040-381206118.png" alt="Create User"></p>
<p><strong>（2）根据UserId查询特定User</strong></p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200423020250623-129562660.png" alt="Query User"></p>
<p><strong>（3）修改User</strong></p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200423020251554-1182724779.png" alt="Update User"></p>
<p><strong>（4）删除一个User</strong></p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200423020251942-1030801907.png" alt="Delete User"></p>
<p><strong>（5）查询所有User</strong></p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200423020252541-590025863.png" alt="Query All Users"></p>
<p>在<code>Redis</code>中的数据如下所示：</p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200423020253587-1434708044.png" alt="Result"></p>
<h1 id="4-总结">4 总结</h1>
<p>本文通过实例讲解了如何整合<code>Springboot</code>和<code>Redis</code>，使用的是<code>Repository</code>的方式。详细代码可在<strong>南瓜慢说</strong>公众号回复&lt;<strong>SpringbootRedisRepository</strong>&gt;获取。</p>
<hr>
<p>欢迎访问<a href="https://www.pkslow.com/">南瓜慢说 www.pkslow.com</a>获取更多精彩文章！</p>
<p>欢迎关注微信公众号&lt;<strong>南瓜慢说</strong>&gt;，将持续为你更新...</p>
<p><img src="https://img2020.cnblogs.com/other/946674/202004/946674-20200423020254002-1658869998.jpg" alt=""></p>
<p><strong>多读书，多分享；多写作，多整理。</strong></p>
</div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<p class="postfoot">
			posted on <span id="post-date">2020-04-23 02:03</span> <a href='https://www.cnblogs.com/larrydpk/'>南瓜慢说</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="https://i.cnblogs.com/EditPosts.aspx?postid=12758143" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(12758143);return false;">收藏</a>
		</p>
	</div>
	<script src="//common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script><script>markdown_highlight();</script><script type="text/javascript">var allowComments=true,cb_blogId=548387,cb_entryId=12758143,cb_blogApp=currentBlogApp,cb_blogUserGuid='4d26c142-e90c-e611-9fc1-ac853d9f53cc',cb_entryCreatedDate='2020/4/23 2:03:00';loadViewCount(cb_entryId);var cb_postType=1;var isMarkdown=true;</script>
	
	</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id='comment_form' class='commentform'>
<a name='commentform'></a>
<div id='divCommentShow'></div>
<div id='comment_nav'><span id='span_refresh_tips'></span><a href='javascript:void(0);' onclick='return RefreshCommentList();' id='lnk_RefreshComments' runat='server' clientidmode='Static'>刷新评论</a><a href='#' onclick='return RefreshPage();'>刷新页面</a><a href='#top'>返回顶部</a></div>
<div id='comment_form_container'></div>
<div class='ad_text_commentbox' id='ad_text_under_commentbox'></div>
<div id='ad_t2'></div>
<div id='opt_under_post'></div>
<script async='async' src='https://www.googletagservices.com/tag/js/gpt.js'></script>
<script>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
</script>
<script>
  googletag.cmd.push(function() {
        googletag.defineSlot('/1090369/C1', [300, 250], 'div-gpt-ad-1546353474406-0').addService(googletag.pubads());
        googletag.defineSlot('/1090369/C2', [468, 60], 'div-gpt-ad-1539008685004-0').addService(googletag.pubads());
        googletag.pubads().enableSingleRequest();
        googletag.enableServices();
  });
</script>
<div id='cnblogs_c1' class='c_ad_block'>
    <div id='div-gpt-ad-1546353474406-0' style='height:250px; width:300px;'></div>
</div>
<div id='under_post_news'></div>
<div id='cnblogs_c2' class='c_ad_block'>
    <div id='div-gpt-ad-1539008685004-0' style='height:60px; width:468px;'></div>
</div>
<div id='under_post_kb'></div>
<div id='HistoryToday' class='c_ad_block'></div>
<script type='text/javascript'>
 if(enablePostBottom()) {
    codeHighlight();
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverT2();
    deliverC1();
    deliverC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);  
}
</script>
</div>

    
</div>
</div>
<div id="leftmenu">


<h3>导航</h3>
<ul>
<li>
<a id="blog_nav_sitehome" href="https://www.cnblogs.com/">博客园</a></li>
<li>
<a id="blog_nav_myhome" class="two_words" href="https://www.cnblogs.com/larrydpk/">首页</a></li>
<li>
<a id="blog_nav_newpost" rel="nofollow" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li>
<a id="blog_nav_contact" accesskey="9" class="two_words" rel="nofollow" href="https://msg.cnblogs.com/send/%E5%8D%97%E7%93%9C%E6%85%A2%E8%AF%B4">联系</a></li>
<li>
<a id="blog_nav_rss" class="two_words" href="https://www.cnblogs.com/larrydpk/rss">订阅</a>
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/larrydpk/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a>
</li>
<li>
<a id="blog_nav_admin" class="two_words" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
</ul>

<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
<meta name="vs_showGrid" content="False">

<h3>公告</h3>
<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>

<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>

</div>
</div>
<div class="clear"></div>
<div id="footer">

<p id="footer">
	Powered by: 
	<br />
	
	<a id="Footer1_Hyperlink3" NAME="Hyperlink1" href="https://www.cnblogs.com/"><font face="Verdana">博客园</font></a>
	<br />
	Copyright &copy; 南瓜慢说
</p>
</div>
</div>


</body>
</html>
